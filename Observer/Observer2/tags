!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Java	a,annotation	/annotation declarations/
!_TAG_KIND_DESCRIPTION!Java	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Java	e,enumConstant	/enum constants/
!_TAG_KIND_DESCRIPTION!Java	f,field	/fields/
!_TAG_KIND_DESCRIPTION!Java	g,enum	/enum types/
!_TAG_KIND_DESCRIPTION!Java	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Java	m,method	/methods/
!_TAG_KIND_DESCRIPTION!Java	p,package	/packages/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Java	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/emman-pip/Programming/javaStuff/designPatterns/Observer/Observer2/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Java!package	imported	/imported package/
CurrentConditions	CurrentConditions.java	/^	public CurrentConditions() {$/;"	m	class:CurrentConditions
CurrentConditions	CurrentConditions.java	/^public class CurrentConditions implements Observer, Display {$/;"	c
Display	Display.java	/^public interface Display {$/;"	i
ForecastDisplay	ForecastDisplay.java	/^	public ForecastDisplay(Observable obs) {$/;"	m	class:ForecastDisplay
ForecastDisplay	ForecastDisplay.java	/^public class ForecastDisplay implements Display, Observer {$/;"	c
HeatIndexDisplay	HeatIndexDisplay.java	/^	public HeatIndexDisplay() {$/;"	m	class:HeatIndexDisplay
HeatIndexDisplay	HeatIndexDisplay.java	/^public class HeatIndexDisplay implements Observer, Display {$/;"	c
Main	Main.java	/^public class Main {$/;"	c
Observer	Observer.java	/^public interface Observer {$/;"	i
StatisticsDisplay	StatisticsDisplay.java	/^	public StatisticsDisplay() {$/;"	m	class:StatisticsDisplay
StatisticsDisplay	StatisticsDisplay.java	/^public class StatisticsDisplay implements Display, java.util.Observer {$/;"	c
Subject	Subject.java	/^public interface Subject {$/;"	i
WeatherData	WeatherData.java	/^	public WeatherData() {$/;"	m	class:WeatherData
WeatherData	WeatherData.java	/^public class WeatherData extends Observable {$/;"	c
changedMeasurements	WeatherData.java	/^	private void changedMeasurements() {$/;"	m	class:WeatherData	file:
currentPressure	ForecastDisplay.java	/^	private float currentPressure = 29.92f;$/;"	f	class:ForecastDisplay	file:
display	CurrentConditions.java	/^	public void display() {$/;"	m	class:CurrentConditions
display	Display.java	/^	public void display();$/;"	m	interface:Display
display	ForecastDisplay.java	/^	public void display() {$/;"	m	class:ForecastDisplay
display	HeatIndexDisplay.java	/^	public void display() {$/;"	m	class:HeatIndexDisplay
display	StatisticsDisplay.java	/^	public void display() {$/;"	m	class:StatisticsDisplay
getAverageTemp	StatisticsDisplay.java	/^	public float getAverageTemp() {$/;"	m	class:StatisticsDisplay
getHumidity	WeatherData.java	/^	public float getHumidity() {$/;"	m	class:WeatherData
getMaxTemp	StatisticsDisplay.java	/^	public double getMaxTemp() {$/;"	m	class:StatisticsDisplay
getMinTemp	StatisticsDisplay.java	/^	public double getMinTemp() {$/;"	m	class:StatisticsDisplay
getPressure	WeatherData.java	/^	public float getPressure() {$/;"	m	class:WeatherData
getTemp	WeatherData.java	/^	public float getTemp() {$/;"	m	class:WeatherData
heatIndex	HeatIndexDisplay.java	/^	private double heatIndex;$/;"	f	class:HeatIndexDisplay	file:
humidity	CurrentConditions.java	/^	private float humidity;$/;"	f	class:CurrentConditions	file:
humidity	WeatherData.java	/^	private float humidity;$/;"	f	class:WeatherData	file:
lastPressure	ForecastDisplay.java	/^	private float lastPressure;$/;"	f	class:ForecastDisplay	file:
main	Main.java	/^	public static void main(String[] args) {$/;"	m	class:Main
notifyUsers	Subject.java	/^	public void notifyUsers();$/;"	m	interface:Subject
observable	CurrentConditions.java	/^	Observable observable;$/;"	f	class:CurrentConditions
observers	WeatherData.java	/^	private ArrayList<Observer> observers = new ArrayList<Observer>();$/;"	f	class:WeatherData	file:
pressure	WeatherData.java	/^	private float pressure;$/;"	f	class:WeatherData	file:
registerUsers	Subject.java	/^	public void registerUsers(Observer observer);$/;"	m	interface:Subject
removeUsers	Subject.java	/^	public void removeUsers(Observer observer);$/;"	m	interface:Subject
rh	HeatIndexDisplay.java	/^	private float rh;$/;"	f	class:HeatIndexDisplay	file:
setMeasurements	WeatherData.java	/^	public void setMeasurements(float newTemp, float newHumidity, float newPressure) {$/;"	m	class:WeatherData
t	HeatIndexDisplay.java	/^	private float t;$/;"	f	class:HeatIndexDisplay	file:
temp	CurrentConditions.java	/^	private float temp;$/;"	f	class:CurrentConditions	file:
temp	StatisticsDisplay.java	/^	private float temp;$/;"	f	class:StatisticsDisplay	file:
temp	WeatherData.java	/^	private float temp;$/;"	f	class:WeatherData	file:
temps	StatisticsDisplay.java	/^	ArrayList<Float> temps = new ArrayList<>();$/;"	f	class:StatisticsDisplay
update	CurrentConditions.java	/^	public void update(Observable obs, Object arg) {$/;"	m	class:CurrentConditions
update	ForecastDisplay.java	/^	public void update(Observable obs, Object obj) {$/;"	m	class:ForecastDisplay
update	HeatIndexDisplay.java	/^	public void update(Observable obs, Object obj) { \/\/ idk formula ng heat index..$/;"	m	class:HeatIndexDisplay
update	Observer.java	/^	public void update(float temp, float humidity, float pressure);$/;"	m	interface:Observer
update	StatisticsDisplay.java	/^	public void update(Observable obs, Object o) {$/;"	m	class:StatisticsDisplay
weatherData	StatisticsDisplay.java	/^	private WeatherData weatherData;$/;"	f	class:StatisticsDisplay	file:
