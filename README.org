* DESIGN PATTERNS
Repository to keep track of my progress with design patterns.

** OO Principles
- *encapsulate what varies*
- favor *composition over inheritance*
- *program to interfaces*, not implementations
- strive for *loosely coupled designs* between objects that interact
- code *should be close for modification* but open for extension
  (Open-Closed principle)

  
** Patterns that flew by...
1. Strategy pattern
   - defines a family of algorithms
   - encapsulates each one and makes them interchangeable
   - lets the algorithm vary independently, depending on how the
     clients decides to use it
2. Observer pattern
   - is a design pattern that is used when there is an observable and
     observer
   - used in one-to-many dependency between objects so that when one
     object changes state, the other objects are
     notified/updated/respond automatically
3. Decorator pattern
   - attaches additional responsibility to an object dynamically
   - provide a flexible alternative to subclassing for extending
     functionality
   - basically uses decorations(decorators) to decorate
     components(object). To decorate means to use/modify/extend the
     function 
